package ::pack::;

// @formatter:off
import events.IEvent.EventReducer;

/*
 * CODE GENERATED BY ::origin::: DO NOT EDIT
 * Files used to generate these types:
::foreach inputs:: * ::__current__::
::end:: */

class MetaRegistry {
	public static var countEvents:Map<String, (Int) -> IEvent> = [::foreach events::::if (reducerList == "COUNT")::
		"::classKey::" => ::className::.new,::end::::end::
	];
	public static var maxFloatEvents:Map<String, (Float) -> IEvent> = [::foreach events::::if ((reducerList == "MAX") && (reducerType == "Float"))::
		"::classKey::" => ::className::.new,::end::::end::
	];
	public static var maxIntEvents:Map<String, (Int) -> IEvent> = [::foreach events::::if ((reducerList == "MAX") && (reducerType == "Int"))::
		"::classKey::" => ::className::.new,::end::::end::
	];
	public static var minFloatEvents:Map<String, (Float) -> IEvent> = [::foreach events::::if ((reducerList == "MIN") && (reducerType == "Float"))::
		"::classKey::" => ::className::.new,::end::::end::
	];
	public static var minIntEvents:Map<String, (Int) -> IEvent> = [::foreach events::::if ((reducerList == "MIN") && (reducerType == "Int"))::
		"::classKey::" => ::className::.new,::end::::end::
	];
}
::foreach events::
::rendered::
::end::